name: Documentation

on:
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - 'docs/**'
      - 'src/**'
      - 'examples/**'
      - '*.py'
      - '*.md'
      - '*.rst'
  pull_request:
    branches:
      - main
      - master
    paths:
      - 'docs/**'
      - 'src/**'
      - 'examples/**'
      - '*.py'
      - '*.md'
      - '*.rst'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'false'
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper git info
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt
        # Install additional dependencies if needed
        pip install wheel setuptools
    
    - name: Install project in development mode
      run: |
        # Install the project itself if it has a setup.py or pyproject.toml
        if [ -f "setup.py" ]; then
          pip install -e .
        elif [ -f "pyproject.toml" ]; then
          pip install -e .
        fi
    
    - name: Set up documentation environment
      run: |
        # Create any necessary directories
        mkdir -p docs/_static
        mkdir -p docs/_templates
        
        # Copy any additional files needed for documentation
        if [ -f "README.md" ]; then
          cp README.md docs/
        fi
    
    - name: Build documentation
      run: |
        cd docs
        make clean
        make html SPHINXOPTS="-W --keep-going -n"
      env:
        PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
    
    - name: Check documentation build
      run: |
        # Check if the build was successful
        if [ ! -f "docs/_build/html/index.html" ]; then
          echo "Documentation build failed - index.html not found"
          exit 1
        fi
        
        # Check for broken links or other issues
        echo "Documentation build completed successfully"
        ls -la docs/_build/html/
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || inputs.deploy == 'true'
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || inputs.deploy == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || inputs.deploy == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Link checker job (optional, runs on PRs)
  link-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/requirements.txt
        pip install sphinx-external-toc linkchecker
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Check external links
      run: |
        # Check for broken external links (with some reasonable limits)
        python -m http.server 8000 --directory docs/_build/html &
        sleep 5
        # linkchecker --check-extern --ignore-url="localhost" http://localhost:8000 || true
        # Kill the server
        pkill -f "python -m http.server"
      continue-on-error: true 